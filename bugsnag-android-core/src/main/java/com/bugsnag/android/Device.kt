package com.bugsnag.android

import com.bugsnag.android.internal.journal.Journalable

/**
 * Stateless information set by the notifier about the device on which the event occurred can be
 * found on this class. These values can be accessed and amended if necessary.
 */
open class Device internal constructor(
    data: MutableMap<String, Any?> = mutableMapOf()
) : JsonStream.Streamable, Journalable {

    protected val map: MutableMap<String, Any?> = data.withDefault { null }

    internal constructor(
        buildInfo: DeviceBuildInfo,
        cpuAbi: Array<String>?,
        jailbroken: Boolean?,
        id: String?,
        locale: String?,
        totalMemory: Long?,
        runtimeVersions: MutableMap<String, Any>?
    ) : this(
        mutableMapOf(
            "cpuAbi" to cpuAbi,
            "manufacturer" to buildInfo.manufacturer,
            "model" to buildInfo.model,
            "osName" to "android",
            "osVersion" to buildInfo.osVersion,
            "runtimeVersions" to runtimeVersions,
            "totalMemory" to totalMemory,
            "locale" to locale,
            "id" to id,
            "jailbroken" to jailbroken
        )
    )

    /**
     * A collection of names and their versions of the primary languages, frameworks or
     * runtimes that the application is running on
     */
    var runtimeVersions: MutableMap<String, Any>? by map

    /**
     * The total number of bytes of memory on the device
     */
    var totalMemory: Long? by map

    /**
     * The IETF language tag of the locale used
     */
    var locale: String? by map

    /**
     * A UUID generated by Bugsnag and used for the individual application on a device
     */
    var id: String? by map

    /**
     * Whether the device has been jailbroken
     */
    var jailbroken: Boolean? by map

    /**
     * The Application Binary Interface used
     */
    var cpuAbi: Array<String>? by map

    /**
     * The manufacturer of the device used
     */
    var manufacturer: String? by map

    /**
     * The model name of the device used
     */
    var model: String? by map

    /**
     * The name of the operating system running on the device used
     */
    var osName: String? by map

    /**
     * The version of the operating system running on the device used
     */
    var osVersion: String? by map

    override fun toStream(writer: JsonStream) = writer.value(toJournalSection())

    override fun toJournalSection(): Map<String, Any?> {
        val copy = map.toMutableMap()
        copy["cpuAbi"] = cpuAbi?.toList()
        return copy
    }
}
